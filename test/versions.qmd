---
title: Turing.jl versions

---

## Latest version

```{=html}
<table>
  <tbody style="border: 1px solid lightgrey">
    <tr style="text-align: center">
    <td>master</td>
    <td>v33.5.0</td>
    <td><a href="#">Documentation</a></td>
    </tr>
  </tbody>
</table>
```

## Stable version

```{=html}
<table>
  <tbody style="border: 1px solid lightgrey">
    <tr style="text-align: center">
    <td>v0.15.8</td>
    <td>Documentation</td>
    </tr>
  </tbody>
</table>
```

## Previous versions

```{=html}
<table>
  <tbody style="border: 1px solid lightgrey">
    <tr style="text-align: center">
    <td>v0.15.7</td>
    <td>Documentation</td>
    </tr>
    <tr style="text-align: center">
    <td>v0.15.6</td>
    <td>Documentation</td>
    </tr>
    <tr style="text-align: center">
    <td>v0.15.5</td>
    <td>Documentation</td>
    </tr>
    <tr style="text-align: center">
    <td>v0.15.4</td>
    <td>Documentation</td>
    </tr>
    <tr style="text-align: center">
    <td>v0.15.3</td>
    <td>Documentation</td>
    </tr>
    </tbody>
</table>
```

## Older versions

```{=html}
<table>
  <tbody style="border: 1px solid lightgrey">
    <tr style="text-align: center">
    <td>v0.15.2</td>
    <td>Documentation</td>
    </tr>
    <tr style="text-align: center">
    <td>v0.15.1</td>
    <td>Documentation</td>
    </tr>
    <tr style="text-align: center">
    <td>v0.15.0</td>
    <td>Documentation</td>
    </tr>
    <tr style="text-align: center">
    <td>v0.14.1</td>
    <td>Documentation</td>
    </tr>
    <tr style="text-align: center">
    <td>v0.14.0</td>
    <td>Documentation</td>
    </tr>
    </tbody>
</table>
```

#!/bin/bash
# Define the repository URL
REPO_URL="https://api.github.com/repos/TuringLang/Turing.jl/tags"
# Fetch the tags from the repository
TAGS=$(curl -s $REPO_URL | grep 'name' | sed 's/.*: "\(.*\)",/\1/')
# Filter out pre-release versions (e.g., 0.33.0-rc.1) and keep only stable versions
STABLE_TAGS=$(echo "$TAGS" | grep -Eo 'v[0-9]+\.[0-9]+\.[0-9]+$')
# Find the latest version (including bug fix versions)
LATEST_VERSION=$(echo "$STABLE_TAGS" | head -n 1)
# Find the latest minor version (without bug fix)
STABLE_VERSION=$(echo "$STABLE_TAGS" | grep -Eo 'v[0-9]+\.[0-9]+(\.0)?$' | head -n 1)
# Filter out bug fix versions from STABLE_TAGS to get only minor versions
MINOR_TAGS=$(echo "$STABLE_TAGS" | grep -Eo 'v[0-9]+\.[0-9]+(\.0)?$')
# Generate the content for the versions.qmd file
VERSIONS_CONTENT="---
title: Versions
---
## Latest Version
- [${LATEST_VERSION}](versions/${LATEST_VERSION}/)
## Stable Version
- [${STABLE_VERSION}](versions/${STABLE_VERSION}/)
## Previous Versions
"
# Add previous versions, excluding the latest and stable versions
for MINOR_TAG in $MINOR_TAGS; do
  if [ "$MINOR_TAG" != "$LATEST_VERSION" ] && [ "$MINOR_TAG" != "$STABLE_VERSION" ]; then
    # Find the latest bug fix version for the current minor version
    LATEST_BUG_FIX=$(echo "$STABLE_TAGS" | grep "^${MINOR_TAG%.*}" | sort -r | head -n 1)
    VERSIONS_CONTENT="${VERSIONS_CONTENT}- [${MINOR_TAG}](versions/${LATEST_BUG_FIX}/)"
  fi
done
# Write the content to the versions.qmd file
echo "$VERSIONS_CONTENT" > versions.qmd